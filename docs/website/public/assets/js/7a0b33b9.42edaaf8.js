"use strict";(self.webpackChunkdocusaurus_template_openapi_docs=self.webpackChunkdocusaurus_template_openapi_docs||[]).push([[852],{68789:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var i=s(74848),t=s(28453);const r={id:"running-the-project",title:"Developing",sidebar_label:"Developing"},d=void 0,c={id:"uwazi/running-the-project",title:"Developing",description:"Overview",source:"@site/docs/uwazi/running-the-project.md",sourceDirName:"uwazi",slug:"/uwazi/running-the-project",permalink:"/docs/uwazi/running-the-project",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/uwazi/running-the-project.md",tags:[],version:"current",frontMatter:{id:"running-the-project",title:"Developing",sidebar_label:"Developing"},sidebar:"openApiSidebar",previous:{title:"Creating the env file",permalink:"/docs/uwazi/env-file-config"},next:{title:"Testing",permalink:"/docs/uwazi/postman-testing"}},l={},o=[{value:"Overview",id:"overview",level:3},{value:"Docker configuration",id:"docker-configuration",level:3},{value:"<strong>Nginx service</strong>",id:"nginx-service",level:4},{value:"<strong>API service</strong>",id:"api-service",level:4},{value:"<strong>Database service</strong>",id:"database-service",level:4},{value:"<strong>volumes</strong>",id:"volumes",level:4},{value:"Nginx Configuration",id:"nginx-configuration",level:3},{value:"HTTP Block",id:"http-block",level:4},{value:"HTTPS Server Block",id:"https-server-block",level:4},{value:"Starting the Application",id:"starting-the-application",level:3},{value:"Seeding the Database",id:"seeding-the-database",level:3}];function a(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The Uwazi API utilizes Docker for containerization, making it easy to set up and run the application."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Docker"})," is a platform that allows you to containerize applications. A Docker container packages an application and its dependencies, ensuring it runs consistently across different environments."]}),"\n",(0,i.jsx)(n.p,{children:"Advantages of Docker include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Portability"}),": Applications run the same regardless of where they are deployed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Dependency Isolation"}),": Each container has its own isolated environment."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Simplified Deployment"}),": Applications can be easily started, stopped, and scaled using Docker."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Docker Compose"})," is a tool that simplifies the management of multi-container Docker applications. With Docker Compose, you can define your application\u2019s services, networks, and volumes in a single file (docker-compose.yml), making it easier to start, stop, and manage the entire system."]}),"\n",(0,i.jsx)(n.p,{children:"Advantages of Docker Compose include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Multi-Container Setup"}),": Allows you to manage multiple services (e.g., API, database, and proxy) as one application."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Configuration in Code"}),": All service definitions (e.g., ports, volumes, dependencies) are stored in a YAML file for easy reproducibility."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Service Dependency Management"}),": Automatically ensures services start in the correct order using depends_on."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Scaling"})," You can scale services (e.g., multiple API instances) with a single command."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Networking"}),": Automatically sets up a private network for all services, enabling seamless communication."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"docker-configuration",children:"Docker configuration"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Dockerfile"})," is a text file that contains all the commands a user could call on the command line to assemble an image. The ",(0,i.jsx)(n.code,{children:"Dockerfile"})," is used to build the Docker image. The apps Dockerfile is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:"   FROM python:3.9\n\n   WORKDIR /app\n\n   # Install dependencies\n   COPY requirements.txt requirements.txt\n   RUN pip install -r requirements.txt\n\n   # Copy application code\n   COPY . .\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FROM python:3.9"})}),(0,i.jsx)(n.td,{children:"Specifies the base image for the Docker container, which includes Python version 3.9."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"WORKDIR /app"})}),(0,i.jsxs)(n.td,{children:["Sets the working directory inside the container to ",(0,i.jsx)(n.code,{children:"/app"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"COPY requirements.txt requirements.txt"})}),(0,i.jsxs)(n.td,{children:["Copies the ",(0,i.jsx)(n.code,{children:"requirements.txt"})," file from the host to the container."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RUN pip install -r requirements.txt"})}),(0,i.jsxs)(n.td,{children:["Installs all dependencies listed in the ",(0,i.jsx)(n.code,{children:"requirements.txt"})," file using ",(0,i.jsx)(n.code,{children:"pip"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"COPY . ."})}),(0,i.jsx)(n.td,{children:"Copies the entire project directory from the host to the container."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"docker-compose.yml"})," file is used to define and run multi-container Docker applications. It allows you to define the services, networks, and volumes required for your application. This application utilises three main docker compose services:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Service"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"nginx"})}),(0,i.jsx)(n.td,{children:"Acts as the reverse proxy, handling HTTP and HTTPS traffic."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"api"})}),(0,i.jsx)(n.td,{children:"Runs the Flask application that serves the Uwazi API."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"database"})}),(0,i.jsx)(n.td,{children:"Provides the PostgreSQL database for storing application data."})]})]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nginx service and api Service:"})," Nginx forwards incoming requests (e.g., ",(0,i.jsx)(n.a,{href:"https://localhost/api/v1/health",children:"https://localhost/api/v1/health"})," ) to the Flask API running in the ",(0,i.jsx)(n.code,{children:"api"})," container."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API service and Database service:"})," The Flask application interacts with the PostgreSQL database to store and retrieve data. This communication happens within the Docker network."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The apps docker-compose.yml is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  nginx:\n    image: nginx:latest\n    container_name: nginx\n    ports:\n      - "443:443"\n      - "80:80"\n    volumes:\n      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf # Nginx configuration\n      - ./config/nginx/certs:/etc/nginx/certs:ro # SSL certificates (read-only)\n      - ./frontend:/var/html/uwazi-frontend # Folder that serves the frontend\'s static files\n    depends_on:\n      - api\n\n  api:\n    build:\n      context: .\n    container_name: api\n    env_file:\n      - .env\n    ports:\n      - "${FLASK_PORT}:${FLASK_PORT}"\n    volumes:\n      - .:/app # Mount current directory into docker container\n    depends_on:\n      - database\n    command: >\n      sh -c "flask run --host=0.0.0.0 --port=${FLASK_PORT} --reload"\\\n\n  database:\n    image: postgres:latest\n    container_name: database\n    env_file:\n      - .env\n    ports:\n      - "${POSTGRES_PORT}:5432" # Default PostgreSQL port defined in .env file\n    volumes:\n      - database-data:/var/lib/postgresql/data # Persistent storage for PostgreSQL data. This will persist data even if container is deleted.\n\nvolumes:\n  database-data:\n'})}),"\n",(0,i.jsx)(n.h4,{id:"nginx-service",children:(0,i.jsx)(n.strong,{children:"Nginx service"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"image: nginx:latest"})}),(0,i.jsx)(n.td,{children:"Specifies that the latest NGINX image will be used for this service."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"container_name: nginx"})}),(0,i.jsxs)(n.td,{children:["Sets the name of the container to ",(0,i.jsx)(n.code,{children:"nginx"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ports:"})}),(0,i.jsx)(n.td,{children:"Maps ports between the host and container for HTTP (80) and HTTPS (443)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"volumes:"})}),(0,i.jsx)(n.td,{children:"Mounts files from the host (your computer) to the docker container for NGINX configuration and SSL certificates."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"depends_on: - api"})}),(0,i.jsxs)(n.td,{children:["Ensures that the ",(0,i.jsx)(n.code,{children:"api"})," service starts before NGINX."]})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"api-service",children:(0,i.jsx)(n.strong,{children:"API service"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"build: context: ."})}),(0,i.jsx)(n.td,{children:"Builds the API container using the current directory as the context."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"container_name: api"})}),(0,i.jsxs)(n.td,{children:["Sets the container name to ",(0,i.jsx)(n.code,{children:"api"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"env_file: - .env"})}),(0,i.jsxs)(n.td,{children:["Loads environment variables from the ",(0,i.jsx)(n.code,{children:".env"})," file."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ports:"})}),(0,i.jsx)(n.td,{children:"Maps the Flask application port to the host."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"volumes:"})}),(0,i.jsx)(n.td,{children:"Mounts the current project directory to the container for live updates."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"depends_on: - database"})}),(0,i.jsx)(n.td,{children:"Ensures the database service starts before the API."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"command: flask run..."})}),(0,i.jsx)(n.td,{children:"Starts the Flask application with live reloading enabled."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"database-service",children:(0,i.jsx)(n.strong,{children:"Database service"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"image: postgres:latest"})}),(0,i.jsx)(n.td,{children:"Specifies the latest PostgreSQL image for the database service."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"container_name: database"})}),(0,i.jsxs)(n.td,{children:["Names the container ",(0,i.jsx)(n.code,{children:"database"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"env_file: - .env"})}),(0,i.jsxs)(n.td,{children:["Loads database-specific environment variables from the ",(0,i.jsx)(n.code,{children:".env"})," file."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ports: ${POSTGRES_PORT}:5432"})}),(0,i.jsx)(n.td,{children:"Maps the host database port to the default PostgreSQL port in the container."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"volumes: database-data:/var/lib/postgresql/data"})}),(0,i.jsx)(n.td,{children:"Ensures database data persists even if the container is stopped."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"volumes",children:(0,i.jsx)(n.strong,{children:"volumes"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"database-data:"})}),(0,i.jsx)(n.td,{children:"Declares a volume for persistent database storage."})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"nginx-configuration",children:"Nginx Configuration"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Nginx is a high-performance web server often used as a reverse proxy, load balancer, or HTTP cache. In this setup, it acts as a reverse proxy to handle incoming HTTP/HTTPS requests and forward them to the Flask API."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Reverse Proxy"}),(0,i.jsx)(n.td,{children:"Routes client requests to backend servers like Flask."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"HTTPS Support"}),(0,i.jsx)(n.td,{children:"Provides SSL/TLS termination for secure connections."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load Balancing"}),(0,i.jsx)(n.td,{children:"Distributes traffic across multiple backend servers (not used here)."})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["The Nginx configuration file (",(0,i.jsx)(n.code,{children:"config/nginx/nginx.conf"}),") is structured as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-nginx",children:"# Main NGINX configuration file\nevents {\n    # Worker connections\n    worker_connections 1024;\n}\n\nhttp {\n    # Redirect HTTP to HTTPS\n    server {\n        listen 80;\n        server_name localhost;\n\n        # Redirect all HTTP requests to HTTPS\n        return 301 https://$host$request_uri;\n    }\n\n    # HTTPS server block\n    server {\n        listen 443 ssl;\n        server_name localhost;\n\n        # SSL certificate and key\n        ssl_certificate /etc/nginx/certs/localhost.pem;\n        ssl_certificate_key /etc/nginx/certs/localhost-key.pem;\n\n        # SSL protocols\n        ssl_protocols TLSv1.2 TLSv1.3;\n\n        # SSL ciphers\n        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';\n        ssl_prefer_server_ciphers on;\n\n        # SSL session settings\n        ssl_session_cache shared:SSL:10m;\n        ssl_session_timeout 10m;\n\n        # Security headers\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n        add_header X-Content-Type-Options nosniff;\n        add_header X-Frame-Options DENY;\n        add_header X-XSS-Protection \"1; mode=block\";\n\n        # Serve static files from the '/var/html/uwazi-frontend' folder\n        location / {\n            root /var/html/uwazi-frontend; # This is where the built frontend static files are served from\n            index index.html;\n            try_files $uri $uri/ =404;\n        }\n\n        # Reverse proxy only requests starting with '/api' to Flask\n        location /api {\n            proxy_pass http://api:8080;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_buffering off;\n        }\n    }\n}\n\n\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Section"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"events"})}),(0,i.jsx)(n.td,{children:"Defines global settings for NGINX worker connections."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"worker_connections 1024;"})}),(0,i.jsx)(n.td,{children:"Sets the maximum number of simultaneous connections NGINX can handle."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"http-block",children:"HTTP Block"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"listen 80;"})}),(0,i.jsx)(n.td,{children:"Configures NGINX to listen on port 80 for HTTP traffic."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"server_name localhost;"})}),(0,i.jsxs)(n.td,{children:["Defines the server name as ",(0,i.jsx)(n.code,{children:"localhost"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"return 301 https://$host$request_uri;"})}),(0,i.jsx)(n.td,{children:"Redirects all HTTP traffic to HTTPS."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"https-server-block",children:"HTTPS Server Block"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Line"}),(0,i.jsx)(n.th,{children:"Explanation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"listen 443 ssl;"})}),(0,i.jsx)(n.td,{children:"Configures NGINX to listen on port 443 for HTTPS traffic."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ssl_certificate /etc/nginx/certs/localhost.pem;"})}),(0,i.jsx)(n.td,{children:"Specifies the SSL certificate for HTTPS."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ssl_certificate_key /etc/nginx/certs/localhost-key.pem;"})}),(0,i.jsx)(n.td,{children:"Specifies the SSL certificate key for HTTPS."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ssl_protocols TLSv1.2 TLSv1.3;"})}),(0,i.jsx)(n.td,{children:"Defines the supported SSL protocols."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"add_header Strict-Transport-Security..."})}),(0,i.jsx)(n.td,{children:"Adds security headers to enforce best practices for HTTPS connections."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"proxy_pass http://api:8080;"})}),(0,i.jsx)(n.td,{children:"Forwards all incoming requests to the Flask API running on port 8080."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"proxy_set_header Host $host;"})}),(0,i.jsxs)(n.td,{children:["Passes the original ",(0,i.jsx)(n.code,{children:"Host"})," header to the proxied server."]})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"starting-the-application",children:"Starting the Application"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["In order to launch the application, you need to build and start the containers using Docker Compose. In order to build and start the containers, run the following command in your terminal:\n",(0,i.jsx)(n.code,{children:"bash      docker-compose up --build      "})]}),"\n",(0,i.jsxs)(n.p,{children:["Once the application is running, you can verify that it is running by opening your browser and navigating to the health-check endpoint on ",(0,i.jsx)(n.a,{href:"https://localhost/api/v1/health",children:"https://localhost/api/v1/health"}),". You should see a JSON response indicating that the API is running and ready to accept requests as shown below:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "status": "healthy"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"seeding-the-database",children:"Seeding the Database"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["When the application is launched for the first time, it will seed the database with default data. The seeding process is defined in the ",(0,i.jsx)(n.code,{children:"seed.py"})," file located in the ",(0,i.jsx)(n.code,{children:"config/database"})," folder. This file is imported in the ",(0,i.jsx)(n.code,{children:"start.py"})," file and is automatically executed when the application is launched. The seeding process initializes the following data:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Default Uwazi user."}),"\n",(0,i.jsx)(n.li,{children:"Default roles."}),"\n",(0,i.jsx)(n.li,{children:"Default Uwazi organization."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The following variables are used to define the default data used to seed the database. They are defined in the ",(0,i.jsx)(n.code,{children:".env"}),"file:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Variable"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ORG_NAME"})}),(0,i.jsx)(n.td,{children:"Name of the default organization."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ADMIN_EMAIL"})}),(0,i.jsx)(n.td,{children:"Email address for the default admin user."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ADMIN_PASSWORD"})}),(0,i.jsx)(n.td,{children:"Password for the default admin user."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ADMIN_USERNAME"})}),(0,i.jsx)(n.td,{children:"Username for the default admin user."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"The code for the seed function is shown below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'class App:\n    def __init__(self):\n        # ...other code\n\n        with self.app.app_context():\n            # ...other code\n            seed()\n\n        # ...other code\n\napp, debug_mode, flask_port = App().get()\n\napp.run(host="0.0.0.0", port=flask_port, debug=debug_mode)\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The data seeded is defined in the ",(0,i.jsx)(n.code,{children:".env"})," or ",(0,i.jsx)(n.code,{children:".env.sample"})," file under the following variables:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Variable"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ORG_NAME"})}),(0,i.jsx)(n.td,{children:"Name of the default organization."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ADMIN_EMAIL"})}),(0,i.jsx)(n.td,{children:"Email address for the default admin user."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ADMIN_PASSWORD"})}),(0,i.jsx)(n.td,{children:"Password for the default admin user."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEFAULT_ADMIN_USERNAME"})}),(0,i.jsx)(n.td,{children:"Username for the default admin user."})]})]})]}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var i=s(96540);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);